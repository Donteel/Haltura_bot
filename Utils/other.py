import logging
from Utils.config import r
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import ChatMemberAdministrator, InlineKeyboardMarkup, InlineKeyboardButton, message_id
from Utils.Keyboards import btn_admin_confirm, btn_plug
from Utils.StateModel import AdminState
from Utils.bot_instance import bot
from Utils.config import storage, main_chat



async def state_for_user(user_id: int, chat_id: int) -> FSMContext:
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key = StorageKey(chat_id=chat_id,user_id=user_id,bot_id=7926311537)
    context = FSMContext(storage=storage, key=key)
    return context

async def delete_message(chat_id: int,id_message: int) -> None:

    logging.info(f'–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–æ–º–µ—Ä {id_message} –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}')
    try:
        await bot.delete_message(chat_id,id_message)
    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n {e}')
    else:
        logging.info('–ü–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã')

async def clearing_of_all_states(id_data:list[int]):
    for object_id in id_data:
        local_state = await state_for_user(object_id,object_id)
        await local_state.clear()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º HR
async def MessageForHr():

    if r.get('message_id') is not None:

        post_id = int(r.get('message_id').decode('utf-8'))
        logging.info(f'–ü–æ–ª—É—á–µ–Ω ID —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - {post_id}')

        await delete_message(chat_id=main_chat,id_message=post_id)

    try:
        logging.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É')
        message_data = await bot.send_message(
            text='<b>üíº –ò—â–µ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?</b>\n'
                 '–í—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ—é –≤–∞–∫–∞–Ω—Å–∏—é'
                 ' –±–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞! üéØ',
            chat_id=int(main_chat),
            reply_markup=
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å üî∞',url='t.me/Haltura98_bot')]
            ]
            )
        )
        r.set(name='message_id',value=message_data.message_id)
        logging.info(f"–ù–æ–≤—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è - {message_data.message_id} –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–µ—à\n"
                     f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –∫—ç—à - {int(r.get('message_id').decode('utf-8'))}")

    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É\n {e}')


async def request_sender(admin_data:list[int],
                         post_text:str,
                         username:str,
                         post_id:int
                         ) -> None:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    :param admin_data: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    :param post_text: —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    :param username: username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    :param post_id: ID –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :return: None
    """
    for admin_id in admin_data:
        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}')
        message_obj = await bot.send_message(text=f'–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç @{username}\n'
                                             f'–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:\n'
                                             f'{post_text}\n'
                                             f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                                             chat_id=int(admin_id),
                                             reply_markup=btn_admin_confirm(post_id)
                                             )

        r.set(name=f"{admin_id}_{post_id}",value=message_obj.message_id,ex='7200')
        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id},'
                     f'–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ redis –∫–ª—é—á - f"{admin_id}_{post_id}", –∑–Ω–∞—á–µ–Ω–∏–µ {message_obj.message_id}'
                     )



async def post_processing_modification(admins_data,**kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏,
     –æ–Ω–∞ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –∑–∞—è–≤–∫–æ–π
    """

    post_text = kwargs['post_text']
    post_id = kwargs['id']
    username = kwargs['username']
    key = kwargs['key']
    post_status = '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' if key == 'adminconfirm' else '–£–¥–∞–ª–µ–Ω' # noqa

    for admin_id in admins_data:
        processing_data = r.get(f'{admin_id}_{post_id}')

        print(f'–î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {processing_data}')

        if processing_data is not None:
            await bot.edit_message_text(text=f'–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç @{username}\n'
                                             f'–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:\n'
                                             f'{post_text}\n'
                                             f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {post_status}',
                                        chat_id=int(admin_id),
                                        message_id=int(processing_data.decode('utf-8')),
                                        reply_markup=btn_plug()
                                             )
            r.delete(f'{admin_id}_{post_id}')
        else:
            return False
    return True
