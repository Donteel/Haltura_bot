import logging
from Utils.bot_instance import bot
from aiogram.fsm.state import State
from apscheduler.jobstores.base import JobLookupError
from DataBase.MessageObject import MessageObject
from Utils.config import r, action_orm, gpt_key,scheduler, orm_posts, orm_messages, storage, main_chat
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from Utils.Keyboards import btn_plug, btn_home, btn_moderation
from openai import OpenAI




# –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def state_for_user(user_id) -> FSMContext:
    key = StorageKey(chat_id=user_id,user_id=user_id,bot_id=7926311537)
    context = FSMContext(storage=storage, key=key)
    return context


# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def set_state_for(id_list:list,state_class: State):
    for user_id in id_list:
        state = await state_for_user(user_id)
        await state.set_state(state_class)


# —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
async def delete_message(chat_id: int,id_message: int) -> None:

    logging.info(f'–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–æ–º–µ—Ä {id_message} –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}')
    try:
        await bot.delete_message(chat_id,id_message)
    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n {e}')
    else:
        logging.info('–ü–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã')


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def channel_message(message_text):

    if r.get('message_id') is not None:

        post_id = int(r.get('message_id').decode('utf-8'))
        logging.info(f'–ü–æ–ª—É—á–µ–Ω ID —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - {post_id}')

        await delete_message(chat_id=main_chat,id_message=post_id)

    try:
        logging.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É')
        message_data = await bot.send_message(
            text=message_text,
            chat_id=int(main_chat),
            reply_markup=
                InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å üî∞',url='t.me/Haltura98_bot')] # noqa
                    ]
                )
        )

        r.set(name='message_id',value=message_data.message_id)

        logging.info(f"–ù–æ–≤—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è - {message_data.message_id} –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–µ—à\n"
                     
                     f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –∫—ç—à - {int(r.get('message_id').decode('utf-8'))}")

    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É\n {e}')


async def request_sender(admin_data:list[int],post_id: int) -> None:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    :param admin_data: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    :param post_id: id –∑–∞–ø–∏—Å–∏ –≤ –±–¥
    :return: None
    """

    post = await orm_posts.get_post(post_id)

    for admin in admin_data:

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º

        message_obj = \
            await bot.send_message(
                chat_id=admin,
                text="–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
                     "<b>–ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.</b>\n\n"
                     "<u>–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:</u>\n"
                     f"{post.post_text}\n\n"
                     f"<u>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - @{post.username}</u>",
                reply_markup= btn_moderation(post.id)
            )

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        admin_message = MessageObject(admin_id=admin,
                                      temp_id=post.id,
                                      message_id=message_obj.message_id
                                      )

        await orm_messages.add_message_data(admin_message)


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def admin_broadcast(admin_data:list[int],text:str,keyboard=btn_home) -> None:
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

    :param admin_data: —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    :param text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param keyboard: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    :return: None
    """
    admin_count = 0

    for admin_id in admin_data:
        await bot.send_message(chat_id=admin_id,text=text,reply_markup=keyboard())
        admin_count +=1
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n"
                 f"{text} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {admin_count} –∞–¥–º–∏–Ω–∞–º")


async def post_publication(chat_id:int,post_id) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É
    :param chat_id: id –≥—Ä—É–ø–ø—ã
    :param post_id: id –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    :return: None
    """
    post_data = await orm_posts.get_post(post_id)
    try:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∫–∞–Ω–∞–ª
        message_obj = await bot.send_message(
            text=f"{post_data.post_text}",
            chat_id=int(chat_id)
        )

    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤  –≥—Ä—É–ø–ø—É\n"
                     f"{e}")
        return
    else:

        # —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await orm_posts.addMessageId_to_post(post_id=post_data.id,
                                              message_id=message_obj.message_id
                                              )


        await bot.send_message(
            text='<b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ª–æ–∂–µ–Ω –≤ –≥—Ä—É–ø–ø—É.</b>\n'
                 f'–ù–æ–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - <code><i>{message_obj.message_id}</i></code> –æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n'
                 f'<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!</b>',
            chat_id=int(post_data.user_id),
            reply_markup=btn_home()
        )
        return message_obj.message_id


async def change_admin_message(admins_data:list,post_id: int,verdict: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–¥–∏–∫—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    :param admins_data: —Å–ø–∏—Å–æ–∫ id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    :param post_id: id  –∑–∞–ø–∏—Å–∏ –≤ –±–¥
    :param verdict: –≤–µ—Ä–¥–∏–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :return: bool
    """
    verdicts = {"adminConfirm":"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
                "adminDelete":"–£–¥–∞–ª–µ–Ω–æ",
                "postCancel":"–û—Ç–º–µ–Ω–µ–Ω–æ",
                "cancelAndBlock":"–û—Ç–º–µ–Ω—ë–Ω –∏ –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}

    for admin in admins_data:

        ms_obj = await orm_messages.get_message(admin,int(post_id))

        verdict_text = verdicts[verdict]

        await bot.edit_message_reply_markup(chat_id=admin,
                                      message_id=ms_obj.message_id,
                                      reply_markup=btn_plug(f"{verdict_text}!"))




# AI –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
async def post_moderation(post_text):

    gpt_client = OpenAI(api_key=gpt_key)
    try:
        completion = gpt_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role":"system",
                 "content":
                     "–¢—ã —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–µ–π.\n"
                     "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞–º–∏ 0 –∏–ª–∏ 1.\n"
                     "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞–∫–∞–Ω—Å–∏–µ–π.\n"
                     "–¢—ã –ø—Ä–æ–≤–µ—Ä—è–µ—à—å —É–∫–∞–∑–∞–Ω—ã –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –≤ –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                     "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, –∞–¥—Ä–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                     "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–ø–ª–∞—Ç–∞."
                     "–ó–∞–ø—Ä–µ—â–µ–Ω–æ: —Ä–µ–∫–ª–∞–º–∞, –∫—É—Ä—å–µ—Ä—ã, —Ñ—Ä–∏–ª–∞–Ω—Å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ñ–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏–∏.\n, —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
                     "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 0 –∞ –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Ç–æ 1"
                 },
                {"role":"user",
                 "content":post_text}
            ]
        )
        logging.info(f'–í–∞–∫–∞–Ω—Å–∏—è - {post_text}\n'
                     f'–í–µ—Ä–¥–∏–∫—Ç –º–æ–¥–µ–ª–∏ - {completion.choices[0].message.content}')

        if completion.choices[0].message.content == "1":
            return True
        else:
            return False
    except Exception as e:
        await admin_broadcast(await action_orm.get_admins_id(),
                              "–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É –∏–∑ –∑–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.\n"
                                    f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n {e}"
                              )
        return False


def schedule_cancel(schedule_id):
    try:
        scheduler.remove_job(schedule_id)
    except JobLookupError as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ ‚Ññ {schedule_id}\n"
                      f"{e}")
        return False
    except Exception as e:

        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
                      f"{e}")
        return False
    return True


