import logging
from Utils.config import r, action_orm, gpt_key
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import  InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from Utils.Keyboards import btn_admin_confirm, btn_plug, btn_home
from openai import OpenAI
from Utils.bot_instance import bot
from Utils.config import storage, main_chat



async def state_for_user(user_id: int, chat_id: int) -> FSMContext:
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key = StorageKey(chat_id=chat_id,user_id=user_id,bot_id=7926311537)
    context = FSMContext(storage=storage, key=key)
    return context


async def delete_message(chat_id: int,id_message: int) -> None:

    logging.info(f'–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–æ–º–µ—Ä {id_message} –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}')
    try:
        await bot.delete_message(chat_id,id_message)
    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n {e}')
    else:
        logging.info('–ü–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã')


async def clearing_of_all_states(id_data:list[int]):
    for object_id in id_data:
        local_state = await state_for_user(object_id,object_id)
        await local_state.clear()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º HR
async def MessageForHr():

    if r.get('message_id') is not None:

        post_id = int(r.get('message_id').decode('utf-8'))
        logging.info(f'–ü–æ–ª—É—á–µ–Ω ID —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - {post_id}')

        await delete_message(chat_id=main_chat,id_message=post_id)

    try:
        logging.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É')
        message_data = await bot.send_message(
            text='<b>üíº –ò—â–µ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?</b>\n'
                 '–í—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ—é –≤–∞–∫–∞–Ω—Å–∏—é'
                 ' –±–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞! üéØ',
            chat_id=int(main_chat),
            reply_markup=
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å üî∞',url='t.me/Haltura98_bot')]
            ]
            )
        )
        r.set(name='message_id',value=message_data.message_id)
        logging.info(f"–ù–æ–≤—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è - {message_data.message_id} –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–µ—à\n"
                     f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –∫—ç—à - {int(r.get('message_id').decode('utf-8'))}")

    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É\n {e}')


async def request_sender(admin_data:list[int],
                         post_text:str,
                         username:str,
                         post_id:int
                         ) -> None:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    :param admin_data: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    :param post_text: —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    :param username: username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    :param post_id: ID –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :return: None
    """
    for admin_id in admin_data:
        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}')
        message_obj = await bot.send_message(text=f'üì¢ <b>–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç</b> {username}\n'
                                             f'üìù <b>–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n'
                                             f'{post_text}\n\n'
                                             f'üìå <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏</b> -  –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.',
                                             chat_id=int(admin_id),
                                             reply_markup=btn_admin_confirm(post_id)
                                             )

        r.set(name=f"{admin_id}_{post_id}",value=message_obj.message_id,ex='7200')
        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id},'
                     f'–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ redis –∫–ª—é—á - f"{admin_id}_{post_id}", –∑–Ω–∞—á–µ–Ω–∏–µ {message_obj.message_id}'
                     )


# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def admin_broadcast(admin_data:list[int],text:str) -> None:
    admin_count = 0

    for admin_id in admin_data:
        await bot.send_message(chat_id=admin_id,text=text)
        admin_count +=1
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n"
                 f"{text} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {admin_count} –∞–¥–º–∏–Ω–∞–º")


async def job_posting(post_text:str,chat_id:int,user_id:int) -> int|None:
    try:
        message_obj = await bot.send_message(
            text=f"{post_text}",
            chat_id=int(chat_id)
        )
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω—É—é –≥—Ä—É–ø–ø—É\n"
                     f"{e}")
        return None
    else:

        await action_orm.create_new_post(post_text=post_text,
                                         user_id=user_id,
                                         message_id=message_obj.message_id
                                         )

        await bot.send_message(
            text='–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –±—ã–ª –≤—ã–ª–æ–∂–µ–Ω –≤ –≥—Ä—É–ø–ø—É.\n'
                 f'–ù–æ–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - <b><i>{message_obj.message_id}</i></b> –æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –µ—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.\n\n'
                 f'<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!</b>',
            chat_id=int(user_id),
            reply_markup=btn_home()
        )

        return message_obj.message_id


async def post_processing_modification(admins_data,**kwargs):
    """
        –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –∑–∞—è–≤–∫–æ–π
    """

    post_text = kwargs['post_text']
    post_id = kwargs['id']
    username = kwargs['username']
    key = kwargs['key']
    post_status = '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' if key == 'adminconfirm' else '–£–¥–∞–ª–µ–Ω' # noqa

    for admin_id in admins_data:
        processing_data = r.get(f'{admin_id}_{post_id}')

        print(f'–î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {processing_data}')

        if processing_data is not None:
            await bot.edit_message_text(text=f'–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç @{username}\n'
                                             f'–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:\n'
                                             f'{post_text}\n'
                                             f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {post_status}',
                                        chat_id=int(admin_id),
                                        message_id=int(processing_data.decode('utf-8')),
                                        reply_markup=btn_plug()
                                             )
            r.delete(f'{admin_id}_{post_id}')
        else:
            return False
    return True


async def post_moderation(post_text):

    gpt_client = OpenAI(api_key=gpt_key)

    completion = gpt_client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role":"system",
             "content":
                 "–¢—ã —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–µ–π.\n"
                 "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞–º–∏ 0 –∏–ª–∏ 1.\n"
                 "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞–∫–∞–Ω—Å–∏–µ–π.\n"
                 "–¢—ã –ø—Ä–æ–≤–µ—Ä—è–µ—à—å —É–∫–∞–∑–∞–Ω—ã –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –≤ –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                 "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, –∞–¥—Ä–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                 "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–ø–ª–∞—Ç–∞."
                 "–ó–∞–ø—Ä–µ—â–µ–Ω–æ: —Ä–µ–∫–ª–∞–º–∞, –∫—É—Ä—å–µ—Ä—ã, —Ñ—Ä–∏–ª–∞–Ω—Å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ñ–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏–∏.\n, —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
                 "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 0 –∞ –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Ç–æ 1"
             },
            {"role":"user",
             "content":post_text}
        ]
    )
    logging.info(f'–í–∞–∫–∞–Ω—Å–∏—è - {post_text}\n'
                 f'–í–µ—Ä–¥–∏–∫—Ç –º–æ–¥–µ–ª–∏ - {completion.choices[0].message.content}')

    if completion.choices[0].message.content == "1":
        return True
    else:
        return False

