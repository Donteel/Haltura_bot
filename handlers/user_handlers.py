import asyncio
import logging
from datetime import datetime, timedelta
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram import F
from database.message_object import MessageObject
from database.post_object import PostObject
from middlewares.add_user_middleware import AddUserMiddleware
from middlewares.blacklist_middlewares import CheckBlackListMiddleWare
from middlewares.checklimit_middleware import CheckLimitMiddleware
from middlewares.pending_confirmation_middlewares import CheckPendingConfirmMiddleware
from middlewares.spam_protections import SpamProtected
from middlewares.subscription_verification import SubscriptionVerificationMiddleware
from utils.keyboards import *
from aiogram import Router
from aiogram.filters import Command
from utils.bot_instance import bot
from utils.config import scheduler, orm_posts, orm_messages
from utils.schedule_tasks import time_zone
from utils.state_models import NewPost, DeactivatePostState
from utils.config import action_orm, main_chat
from aiogram.fsm.context import FSMContext
from utils.other import request_sender, post_moderation, post_publication, check_member_status

user_router = Router()


user_router.message.middleware(CheckBlackListMiddleWare())
user_router.callback_query.middleware(CheckBlackListMiddleWare())
user_router.message.middleware(AddUserMiddleware())
user_router.callback_query.middleware(AddUserMiddleware())
user_router.message.middleware(SpamProtected(rate_limit=1))
user_router.message.middleware(CheckPendingConfirmMiddleware())
user_router.message.middleware(SubscriptionVerificationMiddleware())
user_router.callback_query.middleware(SubscriptionVerificationMiddleware())
user_router.message.middleware(CheckLimitMiddleware())


# @user_router.message()
# async def print_id(message):
#     print(message.forward_from_chat.id)

@user_router.message(Command('start'))
async def start(message: Message):


    await message.answer('–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é?'
                        ,reply_markup=btn_home())

    post_count = await orm_posts.get_post_count(message.chat.id)

    print(post_count)

@user_router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def cancel_func(message: Message,state: FSMContext):
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=btn_home())


@user_router.callback_query(F.data == 'subscribe')
async def subscribe(callback: CallbackQuery):
    logging.info('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.')
    if await check_member_status(bot,
                                 user_id=callback.from_user.id,
                                 group_id=main_chat):
        await start(message=callback.message)
    else:
        await callback.answer(show_alert=True,text='–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã...')
    await callback.answer()



@user_router.message(Command('help'))
async def help_func(message: Message):
    await message.reply('–ú–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º —Ç–µ–±–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                        reply_markup=btn_admins(links=await action_orm.get_admins())
                        )

@user_router.message(Command("buy_limits"))
async def buy_limits_for_user(message: Message):
    await message.answer("<b>üîÑ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–º–∏—Ç–∞:</b>\n 1 –ª–∏–º–∏—Ç = <b>50‚ÇΩ</b>\n"
                         "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                         f"<b>–í–∞—à ID –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{message.chat.id}</code> \n",
                         reply_markup=btn_link(
                             "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã",
                             rules_link="t.me/mr_soo777")
                         )


@user_router.message(F.text == 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—É—é')
async def create_post(message: Message,state:FSMContext):

    daily_limit = await action_orm.get_user_limit(message.chat.id)
    extra_limit = await action_orm.get_extra_limit(message.chat.id)

    if daily_limit>0 or extra_limit>0:
        await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å –≥–æ—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é!\n"
                             "üëÄ –û—Ñ–æ—Ä–º–∏–≤ –µ—ë –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –±—ã—Å—Ç—Ä–µ–µ.\n\n"
                             f"üìÑ [<i>–î–æ—Å—Ç—É–ø–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {daily_limit+extra_limit}</i>]",
                             reply_markup=btn_cancel()
                             )


        await state.update_data(username=message.from_user.username)

        await state.set_state(NewPost.awaiting_finished_post)

        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞')

    else:

        await message.answer(
            "üòä <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.</b> \n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å <i>–ª–∏–º–∏—Ç—ã</i> –ø–æ –∫–æ–º–∞–Ω–¥–µ /buy_limits \n\n",
            reply_markup=btn_home()
        )
        await state.clear()


@user_router.message(F.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é')
async def create_post(message: Message,state:FSMContext):

    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',reply_markup=btn_cancel())
    await state.set_state(DeactivatePostState.waiting_post_id)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å—Ç–∞
@user_router.message(DeactivatePostState.waiting_post_id, F.text)
async def deactivate_post(message: Message,state:FSMContext):
    try:
        # –ø–æ–ª—É—á–∞–µ–º post_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        msg_id = int(message.text)
    except ValueError:
        await message.answer('–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –±—É–∫–≤,–ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª—é–±—ã—Ö –∑–Ω–∞–∫–æ–≤!')
        return
    else:

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if post_data:= await orm_posts.check_post_by_msg_id(message_id=msg_id,
                                                user_id=message.chat.id):

            try:
                # –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.bot.edit_message_text(
                    text=f"<s>{post_data.post_text}</s>\n\n –í–ê–ö–ê–ù–°–ò–Ø –ó–ê–ö–†–´–¢–ê‚ùå",
                    chat_id=int(main_chat),
                    message_id=int(post_data.message_id)
                )

                # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await orm_posts.post_deactivate(
                    post_id=int(post_data.id)
                )
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
                                     reply_markup=btn_home()
                                     )
                await state.clear()

            except TelegramBadRequest:
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ',reply_markup=btn_home())
                await state.clear()

        else:
            await message.answer('–ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω',reply_markup=btn_cancel())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
@user_router.message(~F.text,NewPost.awaiting_finished_post)
async def awaiting_post(message: Message):

    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≥—Ä—É–ø–ø—ã,–º—ã –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
                         '–ü–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞–∫–∞–Ω—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.',
                         reply_markup=btn_cancel()
                         )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.message(F.text,NewPost.awaiting_finished_post)
async def awaiting_post(message: Message,state:FSMContext):

    await message.answer('–°–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ—Ä—é —Ç–≤–æ—é –≤–∞–∫–∞–Ω—Å–∏—é...')

    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    admin_data = await action_orm.get_admins_id()
    user_data = await state.get_data()
    post_text = user_data.get('post_text',message.text)

    if await post_moderation(post_text):

        # —Å–æ–∑–¥–∞—Ç—å  –∑–∞–ø–∏—Å—å –≤ –±–¥
        post_id = await orm_posts.create_new_post(user_id=message.chat.id,
                                                   username=username,
                                                   post_text=post_text
                                                   )

        logging.info(f"–í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –≤–æ—Ç –µ–≥–æ ID {post_id}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        task_data = scheduler.add_job(
            func=post_publication,
            trigger="date",
            args=[main_chat,post_id],
            run_date = datetime.now(time_zone) + timedelta(minutes=5)
        )

        # –¥–æ–±–∞–≤–ª—è–µ–º job_id –∫ –∑–∞–ø–∏—Å–∏
        await orm_posts.addJobId_to_post(post_id,task_data.id)

        # —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!\n"
                             "–í–∞–∫–∞–Ω—Å–∏—è –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç–µ—Å—å –Ω–∞–º–∏!",
                             reply_markup=btn_home()
                             )

        # –æ—Ç–Ω–∏–º–∞–µ–º 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await action_orm.change_user_limit(user_id=message.chat.id,
                                           post_id=post_id,
                                           action="minus"
                                           )

        # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await request_sender(admin_data= await action_orm.get_admins_id(),
                             post_id=post_id)

        # —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.clear()

    else:
        # –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        post_id = await orm_posts.create_new_post(user_id=message.chat.id,
                                                   username=username,
                                                   post_text=post_text,
                                                   )

        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin in admin_data:
            ms_obj = await bot.send_message(text=
                                   "–í–∞–∫–∞–Ω—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\n"
                                   f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - @{username}\n"
                                   f"–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                                   f"{post_text}",
                                   chat_id=admin,
                                   reply_markup=btn_approval(post_id)
                                   )

            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å messages –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = MessageObject(admin_id=admin,
                                          post_id=post_id,
                                          message_id=ms_obj.message_id
                                          )

            await orm_messages.add_message_data(admin_message)

        # —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.\n"
                             " –Ø –ø–µ—Ä–µ–¥–∞–ª –µ–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                             reply_markup=btn_standby())

        await state.clear()
        await state.set_state(NewPost.pending_confirmation)


@user_router.message(Command("rules"))
@user_router.message(F.text == 'üìú –ü—Ä–∞–≤–∏–ª–∞')
async def rules(message: Message):
    await message.answer('–ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤!',
                         reply_markup=btn_rules(r'https://telegra.ph/Pravila-dlya-reklamodatelej-12-20')
                         )