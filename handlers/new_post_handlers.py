from aiogram.types import Message
from aiogram import F
from handlers.user_handlers import awaiting_post
from middlewares.add_user_middleware import AddUserMiddleware
from middlewares.blacklist_middlewares import CheckBlackListMiddleWare
from middlewares.subscription_verification import SubscriptionVerificationMiddleware
from utils.config import action_orm
from utils.keyboards import *
from aiogram import Router
from utils.state_models import NewPost
from aiogram.fsm.context import FSMContext
from utils.other import request_sender, post_moderation


create_post_router = Router()


create_post_router.message.middleware(CheckBlackListMiddleWare())
create_post_router.callback_query.middleware(CheckBlackListMiddleWare())
create_post_router.message.middleware(AddUserMiddleware())
create_post_router.callback_query.middleware(AddUserMiddleware())
create_post_router.message.middleware(SubscriptionVerificationMiddleware())
create_post_router.callback_query.middleware(SubscriptionVerificationMiddleware())


@create_post_router.message(~F.text)
async def type_message_error(message: Message):
    await message.answer('–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!')


@create_post_router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ')
async def cancel_create(message: Message,state: FSMContext):
    await state.clear()
    await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=btn_home())


@create_post_router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é")
async def start_creating(message: Message,state: FSMContext):
    user_id = message.chat.id
    daily_limit: int = await action_orm.get_user_limit(user_id)
    extra_limit: int = await action_orm.get_extra_limit(user_id)

    logging.info("–ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                 f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö - {daily_limit}\n"
                 f"–≠–∫—Å—Ç—Ä–∞ - {extra_limit}"
                 )

    if daily_limit + extra_limit > 0:
        await message.answer(
            f'üìÑ [<i>–î–æ—Å—Ç—É–ø–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {daily_limit+extra_limit}</i>]\n\n'
            f'üè¢ <b>–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.!</b>\n'
            '–ì–¥–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å? (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ª–æ–∫–∞—Ü–∏—è –∫ –º–µ—Å—Ç—É —Ä–∞–±–æ—Ç—ã)',
            reply_markup=btn_cancel_create()
        )
        await state.set_state(NewPost.company_name)
    else:
        await message.answer(
            "üòä <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.</b> \n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å <i>–ª–∏–º–∏—Ç—ã</i> –ø–æ –∫–æ–º–∞–Ω–¥–µ /buy_limits \n\n",
            reply_markup=btn_home()
        )
        await state.clear()

@create_post_router.message(NewPost.company_name)
async def waiting_name_company(message: Message,state:FSMContext):

    await state.update_data(company_name=message.text)
    await message.answer('üìç –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω.')
    await state.set_state(NewPost.place)


# –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
@create_post_router.message(NewPost.place)
async def awaiting_place(message: Message,state: FSMContext):
    await state.update_data(place=message.text)
    await message.answer('‚è≥ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è?')
    await state.set_state(NewPost.data_time)


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
@create_post_router.message(NewPost.data_time)
async def awaiting_datatime(message: Message,state: FSMContext):
    await state.update_data(datatime=message.text)
    await message.answer('üíº –£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã.')
    await state.set_state(NewPost.job_title)


# –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
@create_post_router.message(NewPost.job_title)
async def awaiting_job_title(message: Message,state: FSMContext):
    await state.update_data(job_title=message.text)
    await message.answer('üïí –ö–∞–∫–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã?\n'
                         '–£–∫–∞–∂–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω,–∏–ª–∏ –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å–æ–≤.')
    await state.set_state(NewPost.work_schedule)

# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
@create_post_router.message(NewPost.work_schedule)
async def awaiting_work_schedule(message: Message,state: FSMContext):
    await state.update_data(work_schedule=message.text)
    await message.answer('üìã –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å?')
    await state.set_state(NewPost.task)

# –ó–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
@create_post_router.message(NewPost.task)
async def awaiting_task(message: Message,state: FSMContext):
    await state.update_data(task=message.text)
    await message.answer('üí∏ –ö–∞–∫–∞—è —Å—É–º–º–∞ –∏ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã? (–ø–æ—á–∞—Å–æ–≤–∞—è, –∑–∞ —Å–º–µ–Ω—É, –∑–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑)')
    await state.set_state(NewPost.payment)

# –û–ø–ª–∞—Ç–∞
@create_post_router.message(NewPost.payment)
async def awaiting_payment(message: Message,state: FSMContext):
    await state.update_data(payment=message.text)
    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n'
                         'üì± –¢–µ–ª–µ—Ñ–æ–Ω, Telegram, WhatsApp –∏–ª–∏ –¥—Ä—É–≥–æ–π —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±.')
    await state.set_state(NewPost.contacts)

# –°–≤—è–∑—å
@create_post_router.message(NewPost.contacts)
async def awaiting_contacts(message: Message,state: FSMContext):
    await state.update_data(contacts=message.text)
    data  = await state.get_data()

    new_post =  f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b>\n"\
                f"{data['place']}\n"\
                "\n"\
                f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è / –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:</b>\n"\
                f"{data['company_name']}\n"\
                "\n"\
                f"‚è≥ <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b>\n"\
                f"{data['datatime']}\n"\
                "\n"\
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å / –í–∏–¥ —Ä–∞–±–æ—Ç—ã</b>\n"\
                f"{data['job_title']}\n"\
                "\n"\
                f"üïí <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"\
                f"{data['work_schedule']}\n"\
                "\n"\
                f"üìã <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n"\
                f"{data['task']}\n"\
                "\n"\
                f"üí∏ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b>\n"\
                f"{data['payment']}\n"\
                "\n"\
                f"üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b>\n"\
                f"{data['contacts']}"

    await state.update_data(post_text=new_post)

    await message.answer(new_post)

    await message.answer('–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ—Å—Ç?',reply_markup=btn_confirm())

    await state.set_state(NewPost.pending_confirmation)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@create_post_router.message(NewPost.pending_confirmation,F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def awaiting_pending_confirmation(message: Message,state: FSMContext):

    await awaiting_post(message,state)



# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ
@create_post_router.message(NewPost.pending_confirmation,F.text == "üîÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def reload_constructor(message: Message,state: FSMContext):

    await state.clear()
    await start_creating(message,state)
