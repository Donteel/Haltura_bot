from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram import F
from Utils.Keyboards import *
from aiogram import Router
from aiogram.filters import Command
from Utils.StateModel import NewPost, DeletePostState
from Utils.config import action_orm, main_chat, application_group
from aiogram.fsm.context import FSMContext
from Utils.functions import get_admins

user_router = Router()


@user_router.message(Command('start'))
async def start(message: Message,state: FSMContext):
    if await state.get_state() == NewPost.pending_confirmation:
        await message.answer('<b>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>'
                             '<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b>',reply_markup=btn_standby())
        return
    print(message.chat.id)
    await action_orm.create_user(tg_id=message.from_user.id,
                        username=message.from_user.username)
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–ª—Ç—É—Ä–∞ –±–æ—Ç,–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.'
                        ,reply_markup=btn_home())


@user_router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def start(message: Message,state: FSMContext):
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=btn_home())


@user_router.message(Command('help'))
async def start(message: Message):
    await message.reply('–ú–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                        reply_markup=btn_links(
                            await get_admins(main_chat,message.bot)
                        )
                        )


@user_router.message(F.text == 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç')
async def create_post(message: Message,state:FSMContext):
    if await state.get_state() == NewPost.pending_confirmation:
        await message.answer('<b>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>'
                             '<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b>',reply_markup=btn_standby())
        return
    await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç!',reply_markup=btn_cancel())
    await state.set_state(NewPost.awaiting_finished_post)


@user_router.message(F.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–æ—Å—Ç')
async def create_post(message: Message,state:FSMContext):
    if await state.get_state() == NewPost.pending_confirmation:
        await message.answer('<b>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>'
                             '<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b>',reply_markup=btn_standby())
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',reply_markup=btn_cancel())
    await state.set_state(DeletePostState.waiting_post_id)


@user_router.message(DeletePostState.waiting_post_id,F.text)
async def delete_post(message: Message,state:FSMContext):
    try:
        post_id = int(message.text)
    except ValueError:
        await message.answer('–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –±—É–∫–≤,–ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª—é–±—ã—Ö –∑–Ω–∞–∫–æ–≤!')
        return
    else:
        print(message.from_user.id)
        if post_data:= await action_orm.get_post(message_id=post_id,user_id=message.from_user.id):
            print(int(main_chat),int(post_data['message_id']))
            try:
                await message.bot.edit_message_text(text=f"{post_data['post_text']}\n –í–ê–ö–ê–ù–°–ò–Ø –ó–ê–ö–†–´–¢–ê‚ùå",
                                                    chat_id=int(main_chat),
                                                    message_id=int(post_data['message_id'])
                                                    )
                await action_orm.post_deactivate(
                    user_id=int(message.from_user.id),
                    message_id=int(post_data['message_id']
                        )
                )
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
                                     reply_markup=btn_home()
                                     )

            except TelegramBadRequest:
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ',reply_markup=btn_home())
                await state.clear()

        else:
            await message.answer('–ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω',reply_markup=btn_cancel())


@user_router.message(NewPost.awaiting_finished_post)
async def awaiting_post(message: Message,state:FSMContext):
    post = message.text
    post_id = await action_orm.create_temp_post(user_id=message.from_user.id,post_text=post)
    await message.bot.send_message(chat_id=application_group,
                                   text=post,
                                   reply_markup=btn_admin_confirm(post_id))
    await message.answer('–í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É,–æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
                         reply_markup=btn_standby()
                         )
    await state.set_state(NewPost.pending_confirmation)





