import logging
from datetime import datetime, timedelta
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message,ReplyKeyboardRemove
from aiogram import F
from MiddleWares.PendingConfirmaionMiddleWares import CheckPendingConfirmMiddleware
from MiddleWares.SpamProtections import SpamProtected
from Utils.Keyboards import *
from aiogram import Router
from aiogram.filters import Command
from Utils.ScheduleTasks import scheduler, time_zone
from Utils.StateModel import NewPost, DeletePostState
from Utils.config import action_orm, main_chat
from aiogram.fsm.context import FSMContext
from Utils.other import request_sender, post_moderation, admin_broadcast, job_posting

user_router = Router()
user_router.message.middleware(SpamProtected(rate_limit=1))
user_router.message.middleware(CheckPendingConfirmMiddleware())

# @user_router.message()
# async def start(message):
#     print(message.chat.id)

@user_router.message(Command('start'))
async def start(message: Message):

    if await action_orm.create_user(
            tg_id=message.from_user.id,
            username=message.from_user.username):
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É')
    else:
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')

    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–ª—Ç—É—Ä–∞ –±–æ—Ç,–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.'
                        ,reply_markup=btn_home())


@user_router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def start(message: Message,state: FSMContext):
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=btn_home())


@user_router.message(Command('help'))
async def start(message: Message):
    await message.reply('–ú–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º —Ç–µ–±–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                        reply_markup=btn_links(links=await action_orm.get_admins())
                        )


@user_router.message(F.text == 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç')
async def create_post(message: Message,state:FSMContext):

    await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <u>—Ç–µ–∫—Å—Ç–∞!</u></b>\n'
                         '–û—Ñ–æ—Ä–º–∏–≤ —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –µ–≥–æ –æ–¥–æ–±—Ä—è—Ç –±—ã—Å—Ç—Ä–µ–µ.',
                         reply_markup=btn_cancel()
                         )

    await state.update_data(username=message.from_user.username)

    await state.set_state(NewPost.awaiting_finished_post)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞')


@user_router.message(F.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–æ—Å—Ç')
async def create_post(message: Message,state:FSMContext):

    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',reply_markup=btn_cancel())
    await state.set_state(DeletePostState.waiting_post_id)


@user_router.message(DeletePostState.waiting_post_id,F.text)
async def delete_post(message: Message,state:FSMContext):
    try:
        post_id = int(message.text)
    except ValueError:
        await message.answer('–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –±—É–∫–≤,–ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª—é–±—ã—Ö –∑–Ω–∞–∫–æ–≤!')
        return
    else:
        print(message.from_user.id)
        if post_data:= await action_orm.get_post(message_id=post_id,user_id=message.from_user.id):
            print(int(main_chat),int(post_data['message_id']))
            try:
                await message.bot.edit_message_text(text=f"{post_data['post_text']}\n –í–ê–ö–ê–ù–°–ò–Ø –ó–ê–ö–†–´–¢–ê‚ùå",
                                                    chat_id=int(main_chat),
                                                    message_id=int(post_data['message_id'])
                                                    )
                await action_orm.post_deactivate(
                    user_id=int(message.from_user.id),
                    message_id=int(post_data['message_id']
                        )
                )
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
                                     reply_markup=btn_home()
                                     )
                await state.clear()

            except TelegramBadRequest:
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ',reply_markup=btn_home())
                await state.clear()

        else:
            await message.answer('–ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω',reply_markup=btn_cancel())

@user_router.message(~F.text,NewPost.awaiting_finished_post)
async def awaiting_post(message: Message):

    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≥—Ä—É–ø–ø—ã,–º—ã –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
                         '–ü–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞–∫–∞–Ω—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.',
                         reply_markup=btn_cancel()
                         )

@user_router.message(F.text,NewPost.awaiting_finished_post)
async def awaiting_post(message: Message,state:FSMContext):

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}  –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.')

    await message.answer("–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ...",reply_markup=ReplyKeyboardRemove())

    # –ï—Å–ª–∏ username —É–∫–∞–∑–∞–Ω, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    username = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    state_data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    post_text = state_data.get('post_text',message.text)

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é.\n'
                 f'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è -  {post_text}\n')


    # –ø–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_data:list[int] = await action_orm.get_admins_id()


    logging.info(f'–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - {admin_data}')

    if await post_moderation(post_text):
        await message.answer("–í–∞—à –ø–æ—Å—Ç –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.\n"
                             "–ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ...", reply_markup=btn_home()
                             )

        await admin_broadcast(admin_data, "–Ø –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                          "–û–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                                          "–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                                          f"{post_text}\n"
                                          f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å {username}\n")

        scheduler.add_job(job_posting,
                          trigger='date',
                          run_date=datetime.now(time_zone) + timedelta(minutes=5),
                          args=(post_text, main_chat, message.chat.id)
                          )
    else:

        # —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        post_id = await action_orm.create_temp_post(user_id=message.from_user.id,
                                                    post_text=post_text,
                                                    username=username
                                                    )

        logging.info(f'–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, ID –∑–∞–ø–∏—Å–∏ - {post_id}')


        try:
            # —Ä–∞—Å—Å—ã–ª–∞–µ–º –∑–∞—è–≤–∫—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await request_sender(admin_data=admin_data,
                                 post_text=post_text,
                                 username=message.from_user.username,
                                 post_id=post_id
                                 )

        except Exception as e:
            logging.error(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n {e}')
            await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞,–º—ã —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º –µ–µ.",reply_markup=btn_home())
            await state.clear()
        else:
            await message.answer("<b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n"
                                 "–°–∫–æ—Ä–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–µ –≤—Ä—É—á–Ω—É—é,–æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                                 reply_markup=btn_standby()
                                 )

            await state.set_state(NewPost.pending_confirmation)

@user_router.message(Command("rules"))
@user_router.message(F.text == 'üìú –ü—Ä–∞–≤–∏–ª–∞')
async def rules(message: Message):
    await message.answer('–ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤!',
                         reply_markup=btn_rules(r'https://telegra.ph/Pravila-dlya-reklamodatelej-12-20')
                         )

