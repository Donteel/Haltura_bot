from aiogram.types import Message
from aiogram import F
from Utils.Keyboards import *
from aiogram import Router
from Utils.StateModel import NewPost, AdminState
from Utils.config import action_orm, main_chat, application_group
from aiogram.fsm.context import FSMContext

from Utils.other import state_for_user, request_sender

create_post_router = Router()

@create_post_router.message(~F.text)
async def type_message_error(message: Message):
    await message.answer('–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!')


@create_post_router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ')
async def cancel_create(message: Message,state: FSMContext):
    await state.clear()
    await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=btn_home())


@create_post_router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É")
async def start_creating(message: Message,state: FSMContext):
    await message.answer('<b>–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞!</b>\n'
                        '<i>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã.</i>', reply_markup=btn_cancel_create())
    await state.set_state(NewPost.place)


# –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
@create_post_router.message(NewPost.place)
async def awaiting_place(message: Message,state: FSMContext):
    await state.update_data(place=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–≤—Ç—Ä–∞</i>')
    await state.set_state(NewPost.data_time)


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
@create_post_router.message(NewPost.data_time)
async def awaiting_datatime(message: Message,state: FSMContext):
    await state.update_data(datatime=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.</i>')
    await state.set_state(NewPost.job_title)


# –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
@create_post_router.message(NewPost.job_title)
async def awaiting_job_title(message: Message,state: FSMContext):
    await state.update_data(job_title=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥. ‚Äî –ü—è—Ç–Ω. —Å 9:00 –¥–æ 18:00.')
    await state.set_state(NewPost.work_schedule)

# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
@create_post_router.message(NewPost.work_schedule)
async def awaiting_work_schedule(message: Message,state: FSMContext):
    await state.update_data(work_schedule=message.text)
    await message.answer('–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.')
    await state.set_state(NewPost.task)

# –ó–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
@create_post_router.message(NewPost.task)
async def awaiting_task(message: Message,state: FSMContext):
    await state.update_data(task=message.text)
    await message.answer('<i>–£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã.\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: 100 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü –∏–ª–∏ 5000‚ÇΩ –≤ –¥–µ–Ω—å </i>]')
    await state.set_state(NewPost.payment)

# –û–ø–ª–∞—Ç–∞
@create_post_router.message(NewPost.payment)
async def awaiting_payment(message: Message,state: FSMContext):
    await state.update_data(payment=message.text)
    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!,–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏')
    await state.set_state(NewPost.contacts)

# –°–≤—è–∑—å
@create_post_router.message(NewPost.contacts)
async def awaiting_contacts(message: Message,state: FSMContext):
    await state.update_data(contacts=message.text)
    data  = await state.get_data()

    new_post = f"üìç <b>–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</b>\n<i>{data['place']}</i>\n"\
                         f"\n"\
                         f"‚è≥ <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b>\n<i>{data['datatime']}</i>\n"\
                         f"\n"\
                         f"üíº <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n<i>{data['job_title']}</i>\n"\
                         f"\n"\
                         f"üïí <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n<i>{data['work_schedule']}</i>\n"\
                         f"\n"\
                         f"üìã <b>–ó–∞–¥–∞—á–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:</b>\n<i>{data['task']}</i>\n"\
                         f"\n"\
                         f"üí∏ <b>–û–ø–ª–∞—Ç–∞:</b>\n<i>{data['payment']}</i>\n"\
                         f"\n"\
                         f"üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b>\n<i>{data['contacts']}</i>"
    await state.update_data(post=new_post)
    await message.answer(new_post)

    await message.answer('–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ—Å—Ç?',reply_markup=btn_confirm())

    await state.set_state(NewPost.pending_confirmation)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@create_post_router.message(NewPost.pending_confirmation,F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def awaiting_pending_confirmation(message: Message,state: FSMContext):
    data = await state.get_data()
    admin_data: list[int] = await action_orm.get_admins_id()

    if post_id := await action_orm.create_temp_post(post_text=data['post'],
                                                    user_id=message.from_user.id,
                                                    username=message.from_user.username):
        await request_sender(
            admin_data=admin_data,
            post_text=data['post'],
            username=message.from_user.username,
            post_id=post_id
        )

        await message.answer('–í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É,–æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
                             reply_markup=btn_standby()
                             )


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ
@create_post_router.message(NewPost.pending_confirmation,F.text == "üîÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def awaiting_pending_confirmation(message: Message,state: FSMContext):
    await state.clear()
    await start_creating(message,state)
